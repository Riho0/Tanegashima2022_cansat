#保留事項→キャリブレーション、ログ、値取得

import time
import smbus 
import math
import datetime
import RPi.GPIO as GPIO
import pigpio
import cv2
from pyproj import Proj
import numpy
import cgsensor
import pyplot
import serial
import numpy as np
import micropyGPS
#初期設定==============
pi=pigpio.pi()

#GPSのgoal
glon=139.753678
glat=35.688790

#9軸のi2cアドレス
ACCL_ADDR = 0x19
ACCL_R_ADDR = 0x02
MAG_ADDR = 0x13
MAG_R_ADDR = 0x42
i2c = SMBus(1)

def bmx_setup():
    # acc_data_setup : 加速度の値をセットアップ
    i2c.write_byte_data(ACCL_ADDR, 0x0F, 0x03)
    i2c.write_byte_data(ACCL_ADDR, 0x10, 0x08)
    i2c.write_byte_data(ACCL_ADDR, 0x11, 0x00)
    time.sleep(0.5)

    # mag_data_setup : 地磁気値をセットアップ
    data = i2c.read_byte_data(MAG_ADDR, 0x4B)
    if(data == 0):
        i2c.write_byte_data(MAG_ADDR, 0x4B, 0x83)
        time.sleep(0.5)
    i2c.write_byte_data(MAG_ADDR, 0x4B, 0x01)
    i2c.write_byte_data(MAG_ADDR, 0x4C, 0x00)
    i2c.write_byte_data(MAG_ADDR, 0x4E, 0x84)
    i2c.write_byte_data(MAG_ADDR, 0x51, 0x04)
    i2c.write_byte_data(MAG_ADDR, 0x52, 0x16)
    time.sleep(0.5)
    
#入力→9軸センサ(I2C)、出力→加速度(m/s^2:f2)
def acc_value():
   data = [0, 0, 0, 0, 0, 0]
   acc_data = [0.0, 0.0, 0.0]
   try:
       for i in range(6):
           data[i] = i2c.read_byte_data(ACCL_ADDR, ACCL_R_ADDR + i)
       for i in range(3):
           acc_data[i] = ((data[2*i + 1] * 256) + int(data[2*i] & 0xF0)) / 16
           if acc_data[i] > 2047:
               acc_data[i] -= 4096
           acc_data[i] *= 0.0098
 return acc_data
   
def mag_value():
    data = [0, 0, 0, 0, 0, 0, 0, 0]
    mag_data = [0.0, 0.0, 0.0]
    for i in range(8):
        data[i] = i2c.read_byte_data(MAG_ADDR, MAG_R_ADDR + i)
    for i in range(3):
        if i != 2:
            mag_data[i] = ((data[2*i + 1] * 256) + (data[2*i] & 0xF8)) / 8
            if mag_data[i] > 4095:
                mag_data[i] -= 8192
        else:
            mag_data[i] = ((data[2*i + 1] * 256) + (data[2*i] & 0xFE)) / 2
            if mag_data[i] > 16383:
                mag_data[i] -= 32768
    return mag_data
  

SERVO_PIN_R = 23
SERVO_PIN_L = 22
GPIO.setmode(GPIO.BCM)
	GPIO.setup(FuGpio,GPIO.OUT)

def SERVO(a,b):#サーボモーターの回転の1500-2300を0-800に変換，左右を無視して速度だけで書けるようにした
    pi.set_servo_pulsewidth(SERVO_PIN_L,1500+a)
    pi.set_servo_pulsewidth(SERVO_PIN_R,1500-b)

def motor(left,right,seconds):
	#　速く前
	pi.set_servo_pulsewidth( SERVO_PIN_R, 1500 - right )
	pi.set_servo_pulsewidth( SERVO_PIN_L, 1500 + left )
	time.sleep( seconds )
	pi.set_servo_pulsewidth( SERVO_PIN_R, 1500 )
	pi.set_servo_pulsewidth( SERVO_PIN_L, 1500 )

def theta():
	double compass(double x_mag, double y_mag){
    double theta = atan(y_mag/x_mag)*180/3.1415;
    if(x_mag > 0){
        if(y_mag < 0){
            theta = theta + 360;
        }
    }
    else{
        theta = theta + 180;
    }
    return theta;
}
	
def gps():
    # シリアル通信設定
    UART = シリアル。シリアル('/dev/tty1', 9600, タイムアウト = 100)
    # gps設定
    my_gps = MicropyGPS(9, 'dd')

    # 10秒ごとに表示
    tm_last = 0
    一方、 真:
    文 = uart.readline()
    len(文)が0>場合:
    文中のxの場合:
    10 <= x < = 126の場合:
    stat = my_gps.update(chr(x))
    統計の場合:
    tm = my_gps.タイムスタンプ
    tm_now = (tm[0] * 3600) + (tm[1] * 60) + int(tm[2])
    if (tm_now - tm_last) >= 10000:
    印刷('=' * 20)
    print(my_gps.date_string(), tm[0], tm[1], int(tm[2]))
    print("緯度:", my_gps.緯度[0], ", 経度:", my_gps.経度[0])
    ザワ = my_gps.緯度[0]
    プリント(ザワ)
    lon=my_gps.経度[0] 
    lat=my_gps.緯度[0]
    return (lat,lon)
    時間.睡眠(10)

#落下判定==============
#入力→加速度(f)、出力→次
def fall_detection():
	while acce_now <= 9.5:
		time.sleep(5.0):
		 
#着地判定==============
#入力→加速度(f)、気圧(d)、出力→次
def land_detection():
	acce_now =
	


#溶断回路==============
#入力→、出力→mosfet
def fuse_detection():
	FuGpio = 17
	
	GPIO.setmode(GPIO.BCM)
	GPIO.setup(FuGpio,GPIO.OUT)
	GPIO.output(FuGpio,True)


#GPS誘導==============
#入力→、出力→モータ

def heading()
    #緯度経度取得
    lat,lon=gps()
    grs80 = pyproj.Geod(ellps='GRS80')  # GRS80楕円体
    #方位角、逆方位角、距離を取得
    head, inverse_head, distance = grs80.inv(lon, lat, glon, glat)
     print(head,inverse_head, distance)
     return(head,inverse_head,distance)
 
 
def induction(theta1,head)
     #ゴールへの角度
     thetadash=270-theta1+head
     #補正
     if thetadash<0:
         thetadash=thetadash+360
     elif thetadash>360:
         thetadash=thetadash-360
     elif 0<thetadash<360:
         thetadash=thetadash
     print(thetadash)
     #曲がる
     if 360>thetadash>180:
            thetaLast=thetadash
            if 360>thetaLast>270:
                thetaLast=360-thetaLast
                print("mortar->",end='')
                print(thetaLast)
                M=1*thetaLast
                servo(300,300+M)
                print("Turn_Left week")
            elif 270>thetaLast>180:
                thetaLast=360-thetaLast
                print("mortar->",end='')
                print(thetaLast)
                M=1*thetaLast
                servo(300,300+M)
                print("Turn_Left strong")
      elif 0<thetadash<180:
            thetaLast=thetadash
            if 0<thetaLast<90:
                print("mortar->",end='')
                print(thetaLast)
                M=1*thetaLast
                servo(300+M,300)
                print("Turn_Right week")
            elif 180>thetaLast>90:
                print("mortar->",end='')
                print(thetaLast)
                M=1*thetaLast
                servo(300+M,300)
                print("Turn_Right strong")
       else:
            thetadash=thetadash
            print("End")
       time.sleep(0.01)
 
def GPS_run():
    head,inverse_head,distance=heading()
    #10m圏内か
    if distance>10:
        i=1
        while i:
	    head,inverse_head,distance=heading()
	    if distance<=10:
	        break
            else:
	       induction(theta1,head)
	       #停止
               SERVO(0,0)

#画像処理誘導==========
#入力→カメラ、出力→モータ
def image_run():
	cap = cv2.VideoCapture(0)

	while True:
  	  #画像取得
    	_, frame = cap.read()
    	#画像分割(x軸,y軸)
	    flame = cv2.resize(frame,(600,300))
  	  xr, yr = 400, 0
    	xl, yl = 0, 0
	    w, h = 200, 300
  	  right = flame[yr:yr+h, xr:xr+w]
    	left = flame[yl:yl+h, xl:xl+w]
    	#色空間→HSV空間
   	 hsv = cv2.cvtColor(flame,cv2.COLOR_BGR2HSV_FULL)
    	#赤色判定とする範囲を指定
	    lower =np.array([0, 64, 0]) 
	    upper =np.array([15, 255, 255])
	    #赤色＝コーン部分の大きさの全体定義
  	  corn1 = inRange(hsv, lower, upper)
    	#赤色＝コーン部分の大きさの右側定義
  	  corn2 = inRange(right, lower, upper)
    	#赤色＝コーン部分の大きさの左側定義
    	corn3 = inRange(left, lower, upper)
    
    	#画面内に赤色がなければ右回転
 	   if pyplot.imshow(corn) == 0 :
  	      turnright()
    	#右側の赤色が多ければ右回転
	    elif pyplot.imshow(corn2) >= pyplot.imshow(corn3) :
  	      turnright()
    	#左側の赤色が多ければ左回転
	    elif pyplot.imshow(corn3) >= pyplot.imshow(corn2) :
  	      turnleft()
  	  #それ以外（真ん中に捉えている)なら前進
  	  else :
    	    moter()
   	 #コーンの面積率を出し、80%以上なら止める(エクストラサクセス達成)
   	 if pyplot.imshow(corn1) >= 80 : break

	cap.release()#後処理
	cv2.destroyALLWindows()
	


#メイン関数===========
fall_detection()
land_detection()
fuse_detection()
kyari()
GPS_run()
image_run()
